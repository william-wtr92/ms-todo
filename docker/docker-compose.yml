services:
  db:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER_DOCKER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_DOCKER}
      POSTGRES_DB: ${POSTGRES_DB_DOCKER}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 3s
      retries: 10
    networks:
      - ms_network

  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    networks:
      - ms_network

  api:
    build:
      context: ../
      dockerfile: docker/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${POSTGRES_HOST_DOCKER}
      DB_PORT: ${POSTGRES_PORT_DOCKER}
      DB_USER: ${POSTGRES_USER_DOCKER}
      DB_PASSWORD: ${POSTGRES_PASSWORD_DOCKER}
      DB_NAME: ${POSTGRES_DB_DOCKER}
      CORS_ORIGIN: ${CORS_ORIGIN}
      REDIS_HOST: ${REDIS_HOST_DOCKER}
      REDIS_PORT: ${REDIS_PORT_DOCKER}
      REDIS_USERNAME: ${REDIS_USERNAME_DOCKER}
      REDIS_PASSWORD: ${REDIS_PASSWORD_DOCKER}
      REDIS_DB: ${REDIS_DB_DOCKER}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - ./.cache/corepack:/usr/src/app/.cache/corepack
    networks:
      - ms_network
  
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - ms_network

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    networks:
      - ms_network

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - ms_network

networks:
  ms_network:
    driver: bridge

volumes:
  grafana_data: